#GMSout0R <- (runGMS(initprevR, scenario_0,parametersR))
GMSoutiR <- (runGMS(initprevR, scenario_iR,parametersR))
#labeling the columns
outLab <- c("year","detectedIncidence1","totalIncidence1","prevalence1","detectedIncidence2","totalIncidence2","prevalence2")
colnames(GMSoutiR) <- outLab
#grabbing the time of MDA success
#GMSoutiR[GMSoutiR[,3]<(1/12),1]
MDAsuccessV1 <- GMSoutiR[,3]<(1/12)
MDAsuccessV2 <- GMSoutiR[,6]<(1/12)
successMDA <- cbind(MDAsuccessV1, MDAsuccessV2)
result[[((i-1)*100)+j]] <- successMDA
}
}
#time component #scenario
#outside of 'for' loop
#write.table(GMSoutiR[,1],'parameters/times.csv', col.names = 'time', row.names = FALSE)
save(result, paste('results_homo_cov/',gsub("\\:","",Sys.time()),'.Rdata',sep=''))
testfor 2
testfor2
head(testfor2)
parametersR
#MDA_eff_hm
#MDA success on homogeniety vs coverage
#20180124
#see #scenario tag for things to change in each scenario
#x axis variable: homogen, [0 to 100] %
#y axis variable: cmda_2, [0 to 80] %, coverage of MDA in second village
setwd("~/OneDrive/MORU/Projects/TCE_MDA effect/MDA_eff_hm/") #mac
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
sourceCpp("functions/modGMS.cpp")
source("functions/no longer app.R")
#scenario
##initialize input and output storage####
testfor2j <- rep(1:100,80)
testfor2i <- rep(1:80,each=100)
testfor2 <- cbind(testfor2j,testfor2i)
# colnames(testfor2) <- c('homogen','cmda_2')
colnames(testfor2) <- c(NA,NA)
result <- list()
#scenario
####for template####
# for(i in 1:80){
#   for(j in 1:100){
#     homogen <- testfor2[((i-1)*100)+j,1]
#     cmda_2 <- testfor2[((i-1)*100)+j,2]
#     ###other codes for running the model
#     result[[((i-1)*100)+j]] <- successMDA
#   }
# }
####non-reactive parameters####
####interventions####
EDATon = TRUE
ITNon = TRUE
IRSon = FALSE
MDAon = TRUE
primon = FALSE
MSATon = TRUE
VACon = FALSE
####non-reactive functions####
#got from the "parameters" folder #scenario
API <- 2.5
eta <- 30
covEDAT0 <- 25
covITN0 <- 70
effITN <- 30
covIRS0 <- 0
effIRS <- 15
muC <- 1
muA <- 1
muU <- 1
percfail2018 <- 5
percfail2019 <- 15
percfail2020 <- 30
bh_max0 <- 16
bh_max1 <- 16
rhoa <- 55
rhou <- 17
EDATscale <- 1
covEDATi <- 70
ITNscale <- 1
covITNi <- 90
IRSscale <- 1
covIRSi <- 90
lossd <- 30
dm0 <- 3
dm1 <- 3
cmda_1 <- 90
#cmda_2 <- 50 #scenario
#homogen <- 0 #scenario
tm_1 <- 9
tm_2 <- 9
p1v <- 0.5
effv_1 <- 75
effv_2 <- 80
vh <- 90
MSATscale <- 1
covMSATi <- 90
MSATsensC <- 99
MSATsensA <- 87
MSATsensU <- 44
#non-reactive parameters
# define the number of weeks to run the model
dt<-1/12
startyear<-2007
stopyear<-2023
maxt<-stopyear-startyear
times <- seq(0, maxt, by = dt)
tsteps<-length(times)
# initial prevalence
initprevR <- (0.001*API)
#ParLabel <- read.table('functions/ParLabel.csv', sep=",", as.is=TRUE)
# scenario_0<-c(EDATon = 0,
#               ITNon = 0,
#               IRSon = 0,
#               MDAon = 0,
#               primon = 0,
#               MSATon = 0,
#               VACon = 0)
####for loop#####
for(i in 1:80){
for(j in 1:100){
homogen <- testfor2[((i-1)*100)+j,1]
cmda_2 <- testfor2[((i-1)*100)+j,2]
###other codes for running the model
scenario_iR<-(c(EDATon = EDATon,
ITNon = ITNon,
IRSon = IRSon,
MDAon = MDAon,
primon = primon,
MSATon = MSATon,
VACon = as.numeric(VACon)))
parametersR <- (c(
bh_max0 = bh_max0,                 # bites per human per night
bh_max1 = bh_max1,
eta = eta,
covEDAT0 = covEDAT0,
covITN0 = covITN0,
effITN = effITN,
covIRS0 = covIRS0,
effIRS = effIRS,
muC = muC,
muA = muA,
muU = muU,
percfail2018 = percfail2018,
percfail2019 = percfail2019,
percfail2020 = percfail2020,
EDATscale = EDATscale,
covEDATi = covEDATi,
ITNscale = ITNscale,
covITNi = covITNi,
IRSscale = IRSscale,
covIRSi = covIRSi,
cmda_1 = cmda_1,
cmda_2 = cmda_2,
tm_1 = tm_1,          # timing of 1st round [2018 to 2021 - 1 month steps]
tm_2 = tm_2,          # timing of 2nd round [2018+(1/12) to 2021 - 1 month steps]
dm0 = dm0,
dm1 = dm1,
lossd = lossd,
MSATscale = MSATscale,
covMSATi = covMSATi,
MSATsensC = MSATsensC,
MSATsensA = MSATsensA,
MSATsensU = MSATsensU,
effv_1 = effv_1,
effv_2 = effv_2,
vh = vh,
homogen = homogen,
p1v = p1v,
rhoa=rhoa,
rhou=rhou
))
#GMSout0R <- (runGMS(initprevR, scenario_0,parametersR))
GMSoutiR <- (runGMS(initprevR, scenario_iR,parametersR))
#labeling the columns
outLab <- c("year","detectedIncidence1","totalIncidence1","prevalence1","detectedIncidence2","totalIncidence2","prevalence2")
colnames(GMSoutiR) <- outLab
#grabbing the time of MDA success
#GMSoutiR[GMSoutiR[,3]<(1/12),1]
MDAsuccessV1 <- GMSoutiR[,3]<(1/12)
MDAsuccessV2 <- GMSoutiR[,6]<(1/12)
successMDA <- cbind(MDAsuccessV1, MDAsuccessV2)
result[[((i-1)*100)+j]] <- successMDA
}
}
#time component #scenario
#outside of 'for' loop
#write.table(GMSoutiR[,1],'parameters/times.csv', col.names = 'time', row.names = FALSE)
save(result, paste('results_homo_cov/',gsub("\\:","",Sys.time()),'.Rdata',sep=''))
parametersR
#MDA_eff_hm
#MDA success on homogeniety vs coverage
#20180124
#see #scenario tag for things to change in each scenario
#x axis variable: homogen, [0 to 100] %
#y axis variable: cmda_2, [0 to 80] %, coverage of MDA in second village
setwd("~/OneDrive/MORU/Projects/TCE_MDA effect/MDA_eff_hm/") #mac
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
sourceCpp("functions/modGMS.cpp")
source("functions/no longer app.R")
#scenario
##initialize input and output storage####
testfor2j <- rep(1:100,80)
testfor2i <- rep(1:80,each=100)
testfor2 <- cbind(testfor2j,testfor2i)
# colnames(testfor2) <- c('homogen','cmda_2')
colnames(testfor2) <- NULL
result <- list()
#scenario
####for template####
# for(i in 1:80){
#   for(j in 1:100){
#     homogen <- testfor2[((i-1)*100)+j,1]
#     cmda_2 <- testfor2[((i-1)*100)+j,2]
#     ###other codes for running the model
#     result[[((i-1)*100)+j]] <- successMDA
#   }
# }
####non-reactive parameters####
####interventions####
EDATon = TRUE
ITNon = TRUE
IRSon = FALSE
MDAon = TRUE
primon = FALSE
MSATon = TRUE
VACon = FALSE
####non-reactive functions####
#got from the "parameters" folder #scenario
API <- 2.5
eta <- 30
covEDAT0 <- 25
covITN0 <- 70
effITN <- 30
covIRS0 <- 0
effIRS <- 15
muC <- 1
muA <- 1
muU <- 1
percfail2018 <- 5
percfail2019 <- 15
percfail2020 <- 30
bh_max0 <- 16
bh_max1 <- 16
rhoa <- 55
rhou <- 17
EDATscale <- 1
covEDATi <- 70
ITNscale <- 1
covITNi <- 90
IRSscale <- 1
covIRSi <- 90
lossd <- 30
dm0 <- 3
dm1 <- 3
cmda_1 <- 90
#cmda_2 <- 50 #scenario
#homogen <- 0 #scenario
tm_1 <- 9
tm_2 <- 9
p1v <- 0.5
effv_1 <- 75
effv_2 <- 80
vh <- 90
MSATscale <- 1
covMSATi <- 90
MSATsensC <- 99
MSATsensA <- 87
MSATsensU <- 44
#non-reactive parameters
# define the number of weeks to run the model
dt<-1/12
startyear<-2007
stopyear<-2023
maxt<-stopyear-startyear
times <- seq(0, maxt, by = dt)
tsteps<-length(times)
# initial prevalence
initprevR <- (0.001*API)
#ParLabel <- read.table('functions/ParLabel.csv', sep=",", as.is=TRUE)
# scenario_0<-c(EDATon = 0,
#               ITNon = 0,
#               IRSon = 0,
#               MDAon = 0,
#               primon = 0,
#               MSATon = 0,
#               VACon = 0)
####for loop#####
for(i in 1:80){
for(j in 1:100){
homogen <- testfor2[((i-1)*100)+j,1]
cmda_2 <- testfor2[((i-1)*100)+j,2]
###other codes for running the model
scenario_iR<-(c(EDATon = EDATon,
ITNon = ITNon,
IRSon = IRSon,
MDAon = MDAon,
primon = primon,
MSATon = MSATon,
VACon = as.numeric(VACon)))
parametersR <- (c(
bh_max0 = bh_max0,                 # bites per human per night
bh_max1 = bh_max1,
eta = eta,
covEDAT0 = covEDAT0,
covITN0 = covITN0,
effITN = effITN,
covIRS0 = covIRS0,
effIRS = effIRS,
muC = muC,
muA = muA,
muU = muU,
percfail2018 = percfail2018,
percfail2019 = percfail2019,
percfail2020 = percfail2020,
EDATscale = EDATscale,
covEDATi = covEDATi,
ITNscale = ITNscale,
covITNi = covITNi,
IRSscale = IRSscale,
covIRSi = covIRSi,
cmda_1 = cmda_1,
cmda_2 = cmda_2,
tm_1 = tm_1,          # timing of 1st round [2018 to 2021 - 1 month steps]
tm_2 = tm_2,          # timing of 2nd round [2018+(1/12) to 2021 - 1 month steps]
dm0 = dm0,
dm1 = dm1,
lossd = lossd,
MSATscale = MSATscale,
covMSATi = covMSATi,
MSATsensC = MSATsensC,
MSATsensA = MSATsensA,
MSATsensU = MSATsensU,
effv_1 = effv_1,
effv_2 = effv_2,
vh = vh,
homogen = homogen,
p1v = p1v,
rhoa=rhoa,
rhou=rhou
))
#GMSout0R <- (runGMS(initprevR, scenario_0,parametersR))
GMSoutiR <- (runGMS(initprevR, scenario_iR,parametersR))
#labeling the columns
outLab <- c("year","detectedIncidence1","totalIncidence1","prevalence1","detectedIncidence2","totalIncidence2","prevalence2")
colnames(GMSoutiR) <- outLab
#grabbing the time of MDA success
#GMSoutiR[GMSoutiR[,3]<(1/12),1]
MDAsuccessV1 <- GMSoutiR[,3]<(1/12)
MDAsuccessV2 <- GMSoutiR[,6]<(1/12)
successMDA <- cbind(MDAsuccessV1, MDAsuccessV2)
result[[((i-1)*100)+j]] <- successMDA
}
}
#time component #scenario
#outside of 'for' loop
#write.table(GMSoutiR[,1],'parameters/times.csv', col.names = 'time', row.names = FALSE)
save(result, paste('results_homo_cov/',gsub("\\:","",Sys.time()),'.Rdata',sep=''))
save(result, paste('results_homo_cov/results_',gsub("\\:","",Sys.time()),'.Rdata',sep=''))
head(result)
paste('results_homo_cov/results_',gsub("\\:","",Sys.time()),'.Rdata',sep='')
?save
saveRDS(result, paste('results_homo_cov/results_',gsub("\\:","",Sys.time()),'.rds',sep=''))
runApp('functions')
times
time
GMSoutiR[,1]
which(GMSoutiR[,1],GMSoutiR[,1]==(2018+9/12))
GMSoutiR[,1]==(2018+9/12)
GMSoutiR[which(GMSoutiR[,1]==(2018+9/12))]
GMSoutiR[which(GMSoutiR[,1]==(2018+9/12)),1]
?which
which(GMSoutiR[,1]==(2018+9/12))
timeVector <- read.csv('parameters/times.csv')
which(timeVector==(2018+tm_1/12))
result[[1]]
result[[1]][c(MDAstart:MDAstart+6),]
MDAstart <- which(timeVector==(2018+tm_1/12))
result[[1]][c(MDAstart:MDAstart+6),]
c(MDAstart:MDAstart+6)
result[[1]][(MDAstart:MDAstart+6),]
MDAstart:MDAstart+6
MDAstart:149
MDAstart:(MDAstart+6)
result[[1]][MDAstart:(MDAstart+6),]
successwithin <- 6
result[[1]][MDAstart:(MDAstart+successwithin),]
result[[1]][MDAstart:(MDAstart+successwithin),1]
is.True(result[[1]][MDAstart:(MDAstart+successwithin),1])
is.TRUE(result[[1]][MDAstart:(MDAstart+successwithin),1])
isTRUE(result[[1]][MDAstart:(MDAstart+successwithin),1])
sum(result[[1]][MDAstart:(MDAstart+successwithin),1])>0
?lapply
lapply(result, function(x){
sum(x[MDAstart:(MDAstart+successwithin),1]>0)
})
sapply(result, function(x){
sum(x[MDAstart:(MDAstart+successwithin),1]>0)
})
sapply(result, function(x){
sum(x[MDAstart:(MDAstart+successwithin),1])>0
})
village1 <- sapply(result, function(x){
sum(x[MDAstart:(MDAstart+successwithin),1])>0
})
village2 <- sapply(result, function(x){
sum(x[MDAstart:(MDAstart+successwithin),2])>0
})
class(village1)
as.matrix(village1)
v1m <- as.matrix(village1,80,100)
dim(v1m)
head(v1m)
?as.matrix
v1m <- as.matrix(village1,nrow=80,ncol=100)
dim(v1m)
v1m <- matrix(village1,nrow=80,ncol=100)
dim(v1m)
head(v1m)
heatmap(v1m)
heatmap(as.numeric(v1m))
as.numeric(v1m)
v1m <- matrix(as.numeric(village1),nrow=80,ncol=100)
heatmap(v1m)
head(v1m)
?matrix
v1m <- matrix(as.numeric(village1),nrow=80,ncol=100, byrow=TRUE)
heatmap(v1m)
head(village1)
head(village1,20)
head(v1m)
heatmap(v1m, Colv = NA)
heatmap(v1m, Rowv=NA, Colv = NA)
tail(v1m)
v2m <- matrix(as.numeric(village2),nrow=80,ncol=100, byrow=TRUE)
heatmap(v2m, Rowv=NA, Colv = NA)
v12m <- matrix(as.numeric(village1),nrow=80,ncol=100, byrow=TRUE)+matrix(as.numeric(village2),nrow=80,ncol=100, byrow=TRUE)
heatmap(v12m, Rowv=NA, Colv = NA)
head(v2m)
tail(v2m)
v12m <- matrix(as.numeric(village1),nrow=80,ncol=100, byrow=TRUE)+matrix(as.numeric(village2),nrow=80,ncol=100, byrow=TRUE)
heatmap(v12m, Rowv=NA, Colv = NA, col=heat.colors(3))
head(v12m)
write.csv(v12m,'results_homo_cov/v12m.csv')
plot(v12m)
?plot
plot.matrix
install.packages('hplot')
library(hplot)
install.packages("hplot")
library(lattice)
levelplot(v1m)
levelplot(v12m)
levelplot.matrix(v12m)
?levelplot.matrix
levelplot.matrix(data=v12m)
levelplot(data=v12m)
sort(v1m)
v1md <- as.data.frame(as.numeric(village1),nrow=80,ncol=100, byrow=TRUE)
heatmap(v1md)
levelplot(v1md)
sort(v1md)
?sort
order(v1md)
row.names(v1md)
levelplot(v2m)
levelplot(t(v2m))
levelplot(t(v1m))
levelplot(t(v12m))
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("black","red","yellow"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("black","red"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("red","black"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
heatmap(v12m, Rowv=NA, Colv = NA, col=heat.colors(3))
new.palette=colorRampPalette(c("red","blue"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("red","grey"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("red","dark grey"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
new.palette=colorRampPalette(c("red","black"),space="rgb")
levelplot(t(v12m), col.regions=new.palette)
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2")
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="main")
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="No. of villages reaching elimination threshold")
paste('results_homo_cov/homogeniety_MDAcoverage',gsub("\\:","",Sys.time()),'.png',sep='')
png(paste('results_homo_cov/homogeniety_MDAcoverage',gsub("\\:","",Sys.time()),'.png',sep=''))
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="No. of villages reaching elimination threshold")
devoff()
dev.off()
png(paste('results_homo_cov/homogeniety_MDAcoverage',gsub("\\:","",Sys.time()),'.png',sep=''),height= 1600, width=4800, units= "px", res=300)
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="No. of villages reaching elimination threshold")
dev.off()
png(paste('results_homo_cov/homogeniety_MDAcoverage',gsub("\\:","",Sys.time()),'.png',sep=''),height= 1600, width=1800, units= "px", res=300)
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="No. of villages reaching elimination threshold")
dev.off()
png(paste('results_homo_cov/homogeniety_MDAcoverage',gsub("\\:","",Sys.time()),'.png',sep=''),height= 1600, width=1800, units= "px", res=300)
levelplot(t(v12m), col.regions=new.palette, xlab="% of homogeniety", ylab="% of MDA coverage in village 2", main="No. of villages reaching below elimination threshold")
dev.off()
runApp('functions')
